{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Parameters": {
    "CloudLabsAccessKey": {
      "Description": "AccessKey value",

      "Type": "String"
    },

    "CloudLabsSecretKey": {
      "Description": "SecretKey value",

      "Type": "String"
    },

    "CloudLabsDeploymentID": {
      "Description": "DeploymentID value",

      "Type": "String"
    }
  },

  "Resources": {
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",

      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "",

            [
              "s3storage",

              {
                "Ref": "CloudLabsDeploymentID"
              }
            ]
          ]
        }
      }
    },

    "myVPC": {
      "Type": "AWS::EC2::VPC",

      "Properties": {
        "CidrBlock": "10.0.0.0/16",

        "EnableDnsSupport": "true",

        "EnableDnsHostnames": "true"
      }
    },

    "mySubnet": {
      "Type": "AWS::EC2::Subnet",

      "Properties": {
        "VpcId": {
          "Ref": "myVPC"
        },

        "CidrBlock": "10.0.0.0/24",

        "AvailabilityZone": "us-east-1a",

        "MapPublicIpOnLaunch": "true"
      }
    },

    "myInternetGateway": {
      "Type": "AWS::EC2::InternetGateway",

      "Properties": {
        "Tags": [
          {
            "Key": "Name",

            "Value": "gateway"
          }
        ]
      }
    },

    "VpcGWattach": {
      "Type": "AWS::EC2::VPCGatewayAttachment",

      "Properties": {
        "InternetGatewayId": {
          "Ref": "myInternetGateway"
        },

        "VpcId": {
          "Ref": "myVPC"
        }
      }
    },

    "myRouteTable": {
      "Type": "AWS::EC2::RouteTable",

      "Properties": {
        "VpcId": {
          "Ref": "myVPC"
        }
      }
    },

    "myRoute": {
      "Type": "AWS::EC2::Route",

      "Properties": {
        "RouteTableId": {
          "Ref": "myRouteTable"
        },

        "DestinationCidrBlock": "0.0.0.0/0",

        "GatewayId": {
          "Ref": "myInternetGateway"
        }
      }
    },

    "mySubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",

      "Properties": {
        "SubnetId": {
          "Ref": "mySubnet"
        },

        "RouteTableId": {
          "Ref": "myRouteTable"
        }
      }
    },

    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",

      "Properties": {
        "GroupDescription": "Enable HTTP, HTTPS and SSH access",

        "GroupName": "Ubuntu-sg",

        "VpcId": {
          "Ref": "myVPC"
        },

        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",

            "CidrIp": "0.0.0.0/0",

            "FromPort": 22,

            "ToPort": 22
          },

          {
            "IpProtocol": "tcp",

            "CidrIp": "0.0.0.0/0",

            "FromPort": 443,

            "ToPort": 443
          },

          {
            "IpProtocol": "tcp",

            "CidrIp": "0.0.0.0/0",

            "FromPort": 8080,

            "ToPort": 8080
          },

          {
            "IpProtocol": "tcp",

            "CidrIp": "0.0.0.0/0",

            "FromPort": 8000,

            "ToPort": 8000
          },

          {
            "IpProtocol": "tcp",

            "CidrIp": "0.0.0.0/0",

            "FromPort": 8081,

            "ToPort": 8081
          },

          {
            "IpProtocol": "tcp",

            "CidrIp": "0.0.0.0/0",

            "FromPort": 8088,

            "ToPort": 8088
          },

          {
            "IpProtocol": "tcp",

            "CidrIp": "0.0.0.0/0",

            "FromPort": 9870,

            "ToPort": 9870
          },

          {
            "IpProtocol": "tcp",

            "CidrIp": "0.0.0.0/0",

            "FromPort": 9864,

            "ToPort": 9864
          },

          {
            "IpProtocol": "tcp",

            "CidrIp": "0.0.0.0/0",

            "FromPort": 9000,

            "ToPort": 9000
          },

          {
            "IpProtocol": "tcp",

            "CidrIp": "0.0.0.0/0",

            "FromPort": 8983,

            "ToPort": 8983
          }
        ]
      }
    },

    "EC2Instance": {
      "Type": "AWS::EC2::Instance",

      "Properties": {
        "InstanceType": "t2.large",

        "ImageId": "ami-0747bdcabd34c712a",

        "KeyName": "WANDisco-key",

        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",

            "Ebs": {
              "VolumeType": "gp2",

              "VolumeSize": "200",

              "DeleteOnTermination": "false",

              "Encrypted": "true"
            }
          }
        ],

        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",

            "GroupSet": [
              {
                "Ref": "InstanceSecurityGroup"
              }
            ],

            "DeviceIndex": 0,

            "SubnetId": {
              "Ref": "mySubnet"
            },

            "AssociatePublicIpAddress": "true"
          }
        ],

        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",

              [
                "#!/bin/bash",

                "\n",

                "sudo echo -e 'Password.1!!\nPassword.1!!' | passwd ubuntu",

                "\n",

                "sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config",

                "\n",

                "sudo service sshd restart",

                "\n",

                "sudo wget https://raw.githubusercontent.com/CloudLabs-Samples/WD-Pilot/dev/setup/aws/scripts/script.sh",

                "\n",

                "chmod +x script.sh",

                "\n",

                "sh script.sh 2>/home/ubuntu/tmplog001.txt",

                "\n",

                "sudo adduser hdoop sudo",

                "\n",

                "sudo adduser hdoop ubuntu",

                "\n",

                "cd /home/hdoop",

                "\n",

                "sudo wget https://raw.githubusercontent.com/CloudLabs-Samples/WD-Pilot/dev/setup/aws/scripts/configurehadoop.sh",

                "\n",

                "chmod +x configurehadoop.sh",

                "\n",

                "su - hdoop -c'sh configurehadoop.sh' 2>/home/ubuntu/tmplog002.txt",

                "\n",

                "chown -R hdoop /home/hdoop/hadoop-3.2.2",

                "\n",

                "sudo wget https://raw.githubusercontent.com/CloudLabs-Samples/WD-Pilot/dev/setup/aws/scripts/installhadoophive.sh",

                "\n",

                "chmod +x installhadoophive.sh",

                "\n",

                "su - hdoop -c'sh installhadoophive.sh' 2>/home/ubuntu/tmplog003.txt",

                "\n",

                "sudo wget https://raw.githubusercontent.com/CloudLabs-Samples/WD-Pilot/dev/setup/aws/scripts/installhue.sh",

                "\n",

                "chmod +x installhue.sh",

                "\n",

                "sh installhue.sh",

                "\n",

                "sudo wget https://raw.githubusercontent.com/CloudLabs-Samples/WD-Pilot/dev/setup/aws/scripts/installsolr.sh",

                "\n",

                "chmod +x installsolr.sh",

                "\n",

                "sh installsolr.sh 2>/home/ubuntu/tmplog009.txt"
              ]
            ]
          }
        }
      }
    },
        "MyTable": {
            "Type": "AWS::Glue::Table",
                "Properties": {
                "CatalogId": {
                    "Ref": "AWS::AccountId"
                },
                "DatabaseName": {
                    "Ref": "MyDatabase"
                },
                "TableInput": {
                    "Name": "gluetable"
                }
            }
        },
        "ScheduledJobTrigger": {
            "Type": "AWS::Glue::Trigger",
                "Properties": {
                "Type": "SCHEDULED",
                    "Description": "DESCRIPTION_SCHEDULED",
                        "Schedule": "cron(0 */2 * * ? *)",
                            "Actions": [
                                {
                                    "JobName": "prod-job2"
                                },
                                {
                                    "JobName": "prod-job3",
                                    "Arguments": {
                                        "job-bookmark-option": "job-bookmark-enable"
                                    }
                                }
                            ],
                                "Name": "prod-trigger1-scheduled"
            }
        },
        "MyDatabase": {
            "Type": "AWS::Glue::Database",
                "Properties": {
                "CatalogId": {
                    "Ref": "AWS::AccountId"
                },
                "DatabaseInput": {
                    "Name": "dbcrawler",
                        "Description": "TestDatabaseDescription",
                            "LocationUri": "TestLocationUri",
                                "Parameters": {
                        "key1": "value1",
                            "key2": "value2"
                    }
                }
            }
        },
        "MyClassifier": {
            "Type": "AWS::Glue::Classifier",
                "Properties": {
                "GrokClassifier": {
                    "Name": "CrawlerClassifier",
                        "Classification": "wikiData",
                            "GrokPattern": "%{NOTSPACE:language} %{NOTSPACE:page_title} %{NUMBER:hits:long} %{NUMBER:retrieved_size:long}"
                }
            }
        },
        "workgroupA": {
            "Type": "AWS::Athena::WorkGroup",
                "Properties": {
                "Name": "workgroupA",
                    "RecursiveDeleteOption": true,
                        "WorkGroupConfiguration": {
                    "PublishCloudWatchMetricsEnabled": true
                }
            }
        },
        "workgroupB": {
            "Type": "AWS::Athena::WorkGroup",
                "Properties": {
                "Name": "workgroupB",
                    "RecursiveDeleteOption": true
            }
        }
  },

  "Outputs": {
    "VMUserName": {
      "Description": "username of the newly created EC2 instance",

      "Value": "ubuntu"
    },

    "VMPassword": {
      "Description": "Password of the newly created EC2 instance",

      "Value": "Password.1!!"
    },

    "HadoopUI": {
      "Description": "URL of the website",

      "Value": {
        "Fn::Join": [
          "",

          [
            "http://",

            {
              "Fn::GetAtt": ["EC2Instance", "PublicDnsName"]
            },

            ":9870"
          ]
        ]
      }
    },

    "HueServer": {
      "Description": "URL of the website",

      "Value": {
        "Fn::Join": [
          "",

          [
            "http://",

            {
              "Fn::GetAtt": ["EC2Instance", "PublicDnsName"]
            },

            ":8000"
          ]
        ]
      }
    },

    "VMDNSName": {
      "Description": "Public DNSName of the newly created EC2 instance",

      "Value": {
        "Fn::GetAtt": ["EC2Instance", "PublicDnsName"]
      }
    },
    "Hue Username": {
      "Description": "username of the newly created EC2 instance",

      "Value": "hdoop"
    },

    "Hue Password": {
      "Description": "Password of the newly created EC2 instance",

      "Value": "hdoop"
    }
  }
}
